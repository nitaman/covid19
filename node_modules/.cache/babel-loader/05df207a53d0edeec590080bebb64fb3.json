{"ast":null,"code":"var _jsxFileName = \"/Users/dailytohoku/AWS/react/covid/src/covid-patient-data.js\";\nimport React from 'react';\nimport './App.css';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tagetFile = './data/02.csv';\n\nvar getCsvData = dataPath => {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", dataPath, false);\n  request.send(null);\n  return request.responseText;\n};\n\nvar csvToJson = (csvStr, userOptions) => {\n  if (typeof csvStr !== 'string') {\n    return null;\n  }\n\n  ;\n  var options = {\n    header: 0,\n    columnName: [],\n    ignoreBlankLine: true\n  };\n\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n\n  var rows = csvStr.split('\\n');\n  var json = [],\n      line = [],\n      row = '',\n      data = {};\n  var i, len, j, len2;\n\n  for (i = 0, len = rows.length; i < len; i++) {\n    if (i + 1 <= options.header) continue;\n    if (options.ignoreBlankLine && rows[i] === '') continue;\n    line = rows[i].split(',');\n    /*\n    [\"2020年4月7日\", \"18\", \"1\", \"17\"]\n    0（検査日時）: \"2020年4月7日\"\n    1（実施数）: \"18\"\n    2（陽性者数）: \"1\"\n    3（陰性者数）: \"17\"\n    */\n\n    if (options.columnName.length > 0) {\n      if (!line[0]) {\n        row = null;\n        continue;\n      } else {\n        if (!line[2]) {\n          row = null;\n          continue;\n        }\n      }\n\n      data = {};\n\n      for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n        if (typeof line[j] !== 'undefined') {\n          row = line[j];\n          row = row.replace(/^\"(.+)?\"$/, '$1');\n          row = row.replace(/\\r/, '');\n          row = row.replace(/\\n/, '');\n        } else {\n          row = null;\n        }\n\n        data[options.columnName[j]] = row;\n      }\n\n      json.unshift(data);\n    } else {\n      json.unshift(line);\n    }\n  }\n\n  return json;\n};\n\nvar jsonObj = csvToJson(getCsvData(tagetFile), {\n  header: 1,\n  columnName: ['ＮＯ', '全国地方公共団体コード', '都道府県名', '保健所管内', '公表_年月日', '判明_年月日', '居住地', '年代', '性別']\n});\n\nfunction hankaku2Zenkaku(str) {\n  return str.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function (s) {\n    return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n  });\n} // 使用例\n\n\nhankaku2Zenkaku(jsonObj['年代']); // '123abC'\n\n{\n  /* 降順 */\n}\n\nfunction compareDown(a, b) {\n  return parseInt(b['ＮＯ']) - parseInt(a['ＮＯ']);\n}\n\n{\n  /* 昇順 */\n}\n\nfunction compareUp(a, b) {\n  return parseInt(a['ＮＯ']) - parseInt(b['ＮＯ']);\n}\n\njsonObj.sort(compareDown);\nconsole.log(jsonObj);\n\nconst CovidTestedStatus = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      className: \"font-weight-bold my-3\",\n      variant: \"h5\",\n      component: \"h2\",\n      children: \"\\u611F\\u67D3\\u75C7\\u60A3\\u8005\\u30C7\\u30FC\\u30BF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"table-responsive\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        id: \"patient-table\",\n        className: \"table table-striped text-left text-nowrap fs80\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u516C\\u8868_\\u5E74\\u6708\\u65E5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u5C45\\u4F4F\\u5730\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u5E74\\u4EE3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u6027\\u5225\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: jsonObj.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item['公表_年月日']\n            }, \"date-\" + item['ＮＯ'], false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item['居住地']\n            }, \"area-\" + item['ＮＯ'], false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item['年代']\n            }, \"age-\" + item['ＮＯ'], false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item['性別']\n            }, \"gender-\" + item['ＮＯ'], false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CovidTestedStatus;\nexport default CovidTestedStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"CovidTestedStatus\");","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/src/covid-patient-data.js"],"names":["React","Typography","tagetFile","getCsvData","dataPath","request","XMLHttpRequest","open","send","responseText","csvToJson","csvStr","userOptions","options","header","columnName","ignoreBlankLine","rows","split","json","line","row","data","i","len","j","len2","length","replace","unshift","jsonObj","hankaku2Zenkaku","str","s","String","fromCharCode","charCodeAt","compareDown","a","b","parseInt","compareUp","sort","console","log","CovidTestedStatus","props","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Typography from '@material-ui/core/Typography';\n\nconst tagetFile = './data/02.csv';\n\nvar getCsvData = (dataPath) => {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", dataPath, false);\n\trequest.send(null);\n  return request.responseText;\n};\n\nvar csvToJson = (csvStr, userOptions) => {\n  if (typeof csvStr !== 'string') {\n    return null\n  };\n  var options = { header : 0, columnName : [], ignoreBlankLine : true };\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n  var rows = csvStr.split('\\n');\n  var json = [], line = [], row = '', data = {};\n  var i, len, j, len2;\n  for (i = 0, len = rows.length; i < len; i++) {\n    if ((i + 1) <= options.header) continue;\n    if (options.ignoreBlankLine && rows[i] === '') continue;\n    line = rows[i].split(',');\n    /*\n    [\"2020年4月7日\", \"18\", \"1\", \"17\"]\n    0（検査日時）: \"2020年4月7日\"\n    1（実施数）: \"18\"\n    2（陽性者数）: \"1\"\n    3（陰性者数）: \"17\"\n    */\n    if (options.columnName.length > 0) {\n      if(!line[0]) {\n        row = null;\n        continue;\n      }else {\n        if(!line[2]) {\n          row = null;\n          continue;\n        }\n      }\n      data = {};\n      for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n        if (typeof line[j] !== 'undefined') {\n          row = line[j];\n          row = row.replace(/^\"(.+)?\"$/, '$1');\n          row = row.replace(/\\r/, '');\n          row = row.replace(/\\n/, '');\n        } else {\n          row = null;\n        }\n        data[options.columnName[j]] = row;\n      }\n      json.unshift(data);\n    } else {\n      json.unshift(line);\n    }\n  }\n  return json;\n};\n\nvar jsonObj = csvToJson(getCsvData(tagetFile), { header : 1, columnName : ['ＮＯ', '全国地方公共団体コード', '都道府県名', '保健所管内' ,'公表_年月日', '判明_年月日', '居住地', '年代', '性別'] });\n\nfunction hankaku2Zenkaku(str) {\n  return str.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function(s) {\n      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);\n  });\n}\n\n// 使用例\nhankaku2Zenkaku(jsonObj['年代']);  // '123abC'\n\n{/* 降順 */}\nfunction compareDown(a, b) {\n  return parseInt(b['ＮＯ']) - parseInt(a['ＮＯ']);\n}\n{/* 昇順 */}\nfunction compareUp(a, b) {\n  return parseInt(a['ＮＯ']) - parseInt(b['ＮＯ']);\n}\njsonObj.sort(compareDown);\n\nconsole.log(jsonObj);\n\nconst CovidTestedStatus = (props) => {\n  return(\n    <div className=\"contWrapper\">\n      <Typography className=\"font-weight-bold my-3\" variant=\"h5\" component=\"h2\">\n        感染症患者データ\n      </Typography>\n      <div class=\"table-responsive\">\n        <table id=\"patient-table\" className=\"table table-striped text-left text-nowrap fs80\">\n          <thead>\n            <tr>\n              <th>公表_年月日</th>\n              <th>居住地</th>\n              <th>年代</th>\n              <th>性別</th>\n            </tr>\n          </thead>\n          <tbody>\n          {\n            jsonObj.map(item => (\n              <tr>\n                <td key={(\"date-\")+item['ＮＯ']}>{item['公表_年月日']}</td>\n                <td key={(\"area-\")+item['ＮＯ']}>{item['居住地']}</td>\n                <td key={(\"age-\")+item['ＮＯ']}>{item['年代']}</td>\n                <td key={(\"gender-\")+item['ＮＯ']}>{item['性別']}</td>\n              </tr>\n            ))\n          }\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default CovidTestedStatus;\n"]},"metadata":{},"sourceType":"module"}