{"ast":null,"code":"/*\n**************************************************\nGetCsvData (datePath)\n--------------------------------------------------\ndatePath: ターゲットファイル\n--------------------------------------------------\ncsvから取得した文字列データと最終更新日を取得\n--------------------------------------------------\n2021.09.02　作成　by shingo nita\n**************************************************\n*/\nexports.GetCsvData = dataPath => {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", dataPath, false);\n  request.send(null);\n  let myLastMod = new Date(request.getResponseHeader(\"last-modified\"));\n  return [request.responseText, myLastMod];\n};\n/*\n**************************************************\nCsvToJson (csvStr, userOptions)\n--------------------------------------------------\ncsvStr: csvデータから取得した文字列\nuserOptions: header情報\n--------------------------------------------------\ncsvから取得したデータをもとにjsonデータを作成\n--------------------------------------------------\n2021.09.02　作成　by shingo nita\n**************************************************\n*/\n\n\nexports.CsvToJson = (csvStr, userOptions) => {\n  if (typeof csvStr !== 'string') {\n    return null;\n  }\n\n  ;\n  var options = {\n    header: 0,\n    columnName: [],\n    ignoreBlankLine: true\n  };\n\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n\n  var rows = csvStr.split('\\n');\n  var json = [],\n      line = [],\n      row = '',\n      data = {};\n  var i, len, j, len2, x;\n\n  for (i = 0, len = rows.length; i < len; i++) {\n    if (rows[i].indexOf(',,,') != -1) {\n      continue;\n    }\n\n    if (i + 1 <= options.header) continue;\n    if (options.ignoreBlankLine && rows[i] === '') continue;\n    line = rows[i].split(',');\n\n    if (options.columnName.length > 0) {\n      /* 行を「,」で分解した要素が空だったらnullを入れる（要素が空だと動作しない？） */\n\n      /* 2021.09.06 ADD By Shingo Nita  */\n      for (x = 0; x < line.length; x++) {\n        if (!line[x]) {\n          row = null;\n          continue;\n        }\n      }\n      /*\n      if(!line[0]) {\n        row = null;\n        continue;\n      }else {\n        if(!line[2]) {\n          row = null;\n          continue;\n        }\n      }\n      */\n\n\n      data = {};\n\n      for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n        if (typeof line[j] !== 'undefined') {\n          row = line[j];\n          row = row.replace(/^\"(.+)?\"$/, '$1');\n          row = row.replace(/\\r/, '');\n          row = row.replace(/\\n/, '');\n        } else {\n          row = null;\n        }\n\n        data[options.columnName[j]] = row;\n      }\n\n      json.unshift(data);\n    } else {\n      json.unshift(line);\n    }\n  }\n\n  return json;\n};\n/*\n**************************************************\nCsvToCaption (csvStr, userOptions)\n--------------------------------------------------\ncsvStr: csvデータから取得した文字列\nuserOptions: header情報\n--------------------------------------------------\ncsvから取得したデータをもとにjsonデータを作成\n--------------------------------------------------\n2021.09.02　作成　by shingo nita\n**************************************************\n*/\n\n\nexports.CsvToCaption = (csvStr, userOptions) => {\n  if (typeof csvStr !== 'string') {\n    return null;\n  }\n\n  ;\n  var options = {\n    header: 0,\n    columnName: [],\n    ignoreBlankLine: true\n  };\n\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n\n  var rows = csvStr.split('\\n');\n  var line = [];\n  var i, len, caption;\n\n  for (i = 0, len = rows.length; i < len; i++) {\n    if (rows[i].indexOf(',,,') != -1) {\n      line = rows[i].split(',');\n\n      if (line[0] && line[0] != 'undefined') {\n        caption += line[0];\n        alert(caption);\n      }\n    } else {\n      continue;\n    }\n  }\n\n  return caption;\n};\n/*\n**************************************************\nFormatDate (date, format)\n--------------------------------------------------\ndate: 日付オブジェクト\nformat: 書式フォーマット\n--------------------------------------------------\njsonから取得したdateをフォーマットを指定して変換する。\n--------------------------------------------------\n2021.09.01　作成　by shingo nita\n**************************************************\n*/\n\n\nexports.FormatDate = (date, format) => {\n  format = format.replace(/yyyy/g, date.getFullYear());\n  format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));\n  format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));\n  format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2));\n  format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));\n  format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));\n  format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3));\n  return format;\n}; // 例：2017年1月2日3時4分5秒6ミリ秒\n\n/*\nvar date = new Date(2017, 0, 2, 3, 4, 5, 6);\n\nconsole.log(FormatDate(date, 'yyyyMMdd')); // \"20170102\"\nconsole.log(FormatDate(date, 'yyyyMMddHHmmssSSS')); // \"20170102030405006\"\nconsole.log(FormatDate(date, 'yyyy/MM/dd')); // \"2017/01/02\"\nconsole.log(FormatDate(date, 'yyyy-MM-dd')); // \"2017-01-02\"\nconsole.log(FormatDate(date, 'HH:mm')); // \"03:04\"\nconsole.log(FormatDate(date, 'HH:mm:ss:SSS')); // \"03:04:05:006\"\n*/","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/src/lib.js"],"names":["exports","GetCsvData","dataPath","request","XMLHttpRequest","open","send","myLastMod","Date","getResponseHeader","responseText","CsvToJson","csvStr","userOptions","options","header","columnName","ignoreBlankLine","rows","split","json","line","row","data","i","len","j","len2","x","length","indexOf","replace","unshift","CsvToCaption","caption","alert","FormatDate","date","format","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getMilliseconds"],"mappings":"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","sourcesContent":["/*\n**************************************************\nGetCsvData (datePath)\n--------------------------------------------------\ndatePath: ターゲットファイル\n--------------------------------------------------\ncsvから取得した文字列データと最終更新日を取得\n--------------------------------------------------\n2021.09.02　作成　by shingo nita\n**************************************************\n*/\nexports.GetCsvData = (dataPath) => {\n  const request = new XMLHttpRequest();\n  request.open(\"GET\", dataPath, false);\n\trequest.send(null);\n  let myLastMod = new Date(request.getResponseHeader(\"last-modified\"));\n  return [request.responseText,myLastMod];\n};\n\n\n\n/*\n**************************************************\nCsvToJson (csvStr, userOptions)\n--------------------------------------------------\ncsvStr: csvデータから取得した文字列\nuserOptions: header情報\n--------------------------------------------------\ncsvから取得したデータをもとにjsonデータを作成\n--------------------------------------------------\n2021.09.02　作成　by shingo nita\n**************************************************\n*/\nexports.CsvToJson = (csvStr, userOptions) => {\n  if (typeof csvStr !== 'string') {\n    return null\n  };\n  var options = { header : 0, columnName : [], ignoreBlankLine : true };\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n  var rows = csvStr.split('\\n');\n  var json = [], line = [], row = '', data = {};\n  var i, len, j, len2, x;\n  for (i = 0, len = rows.length; i < len; i++) {\n    if( rows[i].indexOf(',,,') != -1 ) {\n      continue;\n    }\n    if ((i + 1) <= options.header) continue;\n    if (options.ignoreBlankLine && rows[i] === '') continue;\n    line = rows[i].split(',');\n    if (options.columnName.length > 0) {\n\n      /* 行を「,」で分解した要素が空だったらnullを入れる（要素が空だと動作しない？） */\n      /* 2021.09.06 ADD By Shingo Nita  */\n      for (x=0; x<line.length; x++) {\n        if(!line[x]) {\n          row = null;\n          continue;\n        }        \n      }\n      /*\n      if(!line[0]) {\n        row = null;\n        continue;\n      }else {\n        if(!line[2]) {\n          row = null;\n          continue;\n        }\n      }\n      */\n      data = {};\n      for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n        if (typeof line[j] !== 'undefined') {\n          row = line[j];\n          row = row.replace(/^\"(.+)?\"$/, '$1');\n          row = row.replace(/\\r/, '');\n          row = row.replace(/\\n/, '');\n        } else {\n          row = null;\n        }\n        data[options.columnName[j]] = row;\n      }\n      json.unshift(data);\n    } else {\n      json.unshift(line);\n    }\n  }\n  return json;\n};\n\n\n\n/*\n**************************************************\nCsvToCaption (csvStr, userOptions)\n--------------------------------------------------\ncsvStr: csvデータから取得した文字列\nuserOptions: header情報\n--------------------------------------------------\ncsvから取得したデータをもとにjsonデータを作成\n--------------------------------------------------\n2021.09.02　作成　by shingo nita\n**************************************************\n*/\nexports.CsvToCaption = (csvStr, userOptions) => {\n  if (typeof csvStr !== 'string') {\n    return null\n  };\n  var options = { header : 0, columnName : [], ignoreBlankLine : true };\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n  var rows = csvStr.split('\\n');\n  var line = [];\n  var i, len, caption;\n  for (i = 0, len = rows.length; i < len; i++) {\n    if( rows[i].indexOf(',,,') != -1 ) {\n      line = rows[i].split(',');\n      if( line[0] && line[0] != 'undefined' ) {\n        caption += line[0];\n        alert(caption);\n      }\n    } else {\n      continue;\n    }\n  }\n  return caption;\n};\n\n\n\n/*\n**************************************************\nFormatDate (date, format)\n--------------------------------------------------\ndate: 日付オブジェクト\nformat: 書式フォーマット\n--------------------------------------------------\njsonから取得したdateをフォーマットを指定して変換する。\n--------------------------------------------------\n2021.09.01　作成　by shingo nita\n**************************************************\n*/\nexports.FormatDate = (date, format) => {\n  format = format.replace(/yyyy/g, date.getFullYear());\n  format = format.replace(/MM/g, ('0' + (date.getMonth() + 1)).slice(-2));\n  format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2));\n  format = format.replace(/HH/g, ('0' + date.getHours()).slice(-2));\n  format = format.replace(/mm/g, ('0' + date.getMinutes()).slice(-2));\n  format = format.replace(/ss/g, ('0' + date.getSeconds()).slice(-2));\n  format = format.replace(/SSS/g, ('00' + date.getMilliseconds()).slice(-3));\n  return format;\n}\n\n// 例：2017年1月2日3時4分5秒6ミリ秒\n/*\nvar date = new Date(2017, 0, 2, 3, 4, 5, 6);\n\nconsole.log(FormatDate(date, 'yyyyMMdd')); // \"20170102\"\nconsole.log(FormatDate(date, 'yyyyMMddHHmmssSSS')); // \"20170102030405006\"\nconsole.log(FormatDate(date, 'yyyy/MM/dd')); // \"2017/01/02\"\nconsole.log(FormatDate(date, 'yyyy-MM-dd')); // \"2017-01-02\"\nconsole.log(FormatDate(date, 'HH:mm')); // \"03:04\"\nconsole.log(FormatDate(date, 'HH:mm:ss:SSS')); // \"03:04:05:006\"\n*/\n\n"]},"metadata":{},"sourceType":"module"}