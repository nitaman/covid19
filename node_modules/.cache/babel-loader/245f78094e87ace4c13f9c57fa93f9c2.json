{"ast":null,"code":"var _jsxFileName = \"/Users/dailytohoku/AWS/react/covid/src/App.js\";\nimport React, { Component } from 'react';\nimport { BarChart, Bar } from 'recharts';\nimport { XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fs = require(\"fs\");\n\nlet fileReadStream = fs.createReadStream(\"./data/03.csv\");\nlet invalidLineCount = 0;\n\nconst csvtojson = require(\"csvtojson\");\n\ncsvtojson({\n  \"delimiter\": \";\",\n  \"fork\": true\n}).preFileLine((fileLineString, lineIdx) => {\n  let invalidLinePattern = /^['\"].*[^\"'];/;\n\n  if (invalidLinePattern.test(fileLineString)) {\n    console.log(`Line #${lineIdx + 1} is invalid, skipping:`, fileLineString);\n    fileLineString = \"\";\n    invalidLineCount++;\n  }\n\n  return fileLineString;\n}).fromStream(fileReadStream).subscribe(dataObj => {\n  console.log(dataObj);\n}, err => {\n  console.error(\"Error:\", err);\n}, success => {\n  console.log(\"Skipped lines:\", invalidLineCount);\n  console.log(\"Success\");\n});\nconst data = [{\n  name: 'A',\n  uv: 4000\n}, {\n  name: 'B',\n  uv: 3000\n}, {\n  name: 'C',\n  uv: 2000\n}, {\n  name: 'D',\n  uv: 2780\n}, {\n  name: 'E',\n  uv: 1890\n}, {\n  name: 'F',\n  uv: 2390\n}, {\n  name: 'G',\n  uv: 3490\n}, {\n  name: 'H',\n  uv: 1490\n}, {\n  name: 'I',\n  uv: 2950\n}, {\n  name: 'J',\n  uv: 4690\n}];\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 730,\n      height: 350,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"uv\",\n        fill: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"uv\",\n        fill: \"#784d88\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/src/App.js"],"names":["React","Component","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","fs","require","fileReadStream","createReadStream","invalidLineCount","csvtojson","preFileLine","fileLineString","lineIdx","invalidLinePattern","test","console","log","fromStream","subscribe","dataObj","err","error","success","data","name","uv","App","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BarChart, Bar } from 'recharts';\nimport { XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\nimport './App.css';\n\nconst fs = require(\"fs\");\n\nlet fileReadStream = fs.createReadStream(\"./data/03.csv\");\nlet invalidLineCount = 0;\n\nconst csvtojson = require(\"csvtojson\");\ncsvtojson({ \"delimiter\": \";\", \"fork\": true })\n.preFileLine((fileLineString, lineIdx)=> {\n    let invalidLinePattern = /^['\"].*[^\"'];/;\n    if (invalidLinePattern.test(fileLineString)) {\n        console.log(`Line #${lineIdx + 1} is invalid, skipping:`, fileLineString);\n        fileLineString = \"\";\n        invalidLineCount++;\n    }\n    return fileLineString\n})\n.fromStream(fileReadStream) \n.subscribe((dataObj) => { \n    console.log(dataObj);\n}, \n(err) => { \n    console.error(\"Error:\", err); \n}, \n(success) => {\n    console.log(\"Skipped lines:\", invalidLineCount);\n    console.log(\"Success\"); \n});\n\n\nconst data = [\n  {name: 'A', uv: 4000},\n  {name: 'B', uv: 3000},\n  {name: 'C', uv: 2000},\n  {name: 'D', uv: 2780},\n  {name: 'E', uv: 1890},\n  {name: 'F', uv: 2390},\n  {name: 'G', uv: 3490},\n  {name: 'H', uv: 1490},\n  {name: 'I', uv: 2950},\n  {name: 'J', uv: 4690},\n]\n\nclass App extends Component {\n  render() {\n    return (\n      <BarChart width={730} height={350} data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\n        <Bar dataKey=\"uv\" fill=\"#784d88\" />\n      </BarChart>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}