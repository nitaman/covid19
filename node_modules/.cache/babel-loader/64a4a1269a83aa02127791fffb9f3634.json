{"ast":null,"code":"const getFullWidth = elem => Math.max(elem.offsetWidth, elem.scrollWidth);\n\nconst getFullHeight = elem => Math.max(elem.offsetHeight, elem.scrollHeight);\n\nconst textNodeFromPoint = (element, x, y) => {\n  const nodes = element.childNodes;\n  const range = document.createRange();\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    if (node.nodeType !== 3) {\n      continue;\n    }\n\n    range.selectNodeContents(node);\n    const rect = range.getBoundingClientRect();\n\n    if (x >= rect.left && y >= rect.top && x <= rect.right && y <= rect.bottom) {\n      return node;\n    }\n  }\n\n  return false;\n};\n\nconst clearTextSelection = () => {\n  const selection = window.getSelection ? window.getSelection() : document.selection;\n\n  if (!selection) {\n    return;\n  }\n\n  if (selection.removeAllRanges) {\n    selection.removeAllRanges();\n  } else if (selection.empty) {\n    selection.empty();\n  }\n};\n\nconst CLICK_EVENT_THRESHOLD_PX = 5;\nexport default class ScrollBooster {\n  /**\n   * Create ScrollBooster instance\n   * @param {Object} options - options object\n   * @param {Element} options.viewport - container element\n   * @param {Element} options.content - scrollable content element\n   * @param {String} options.direction - scroll direction\n   * @param {String} options.pointerMode - mouse or touch support\n   * @param {String} options.scrollMode - predefined scrolling technique\n   * @param {Boolean} options.bounce - bounce effect\n   * @param {Number} options.bounceForce - bounce effect factor\n   * @param {Number} options.friction - scroll friction factor\n   * @param {Boolean} options.textSelection - enables text selection\n   * @param {Boolean} options.inputsFocus - enables focus on input elements\n   * @param {Boolean} options.emulateScroll - enables mousewheel emulation\n   * @param {Function} options.onClick - click handler\n   * @param {Function} options.onUpdate - state update handler\n   * @param {Function} options.onWheel - wheel handler\n   * @param {Function} options.shouldScroll - predicate to allow or disable scroll\n   */\n  constructor(options = {}) {\n    const defaults = {\n      content: options.viewport.children[0],\n      direction: 'all',\n      // 'vertical', 'horizontal'\n      pointerMode: 'all',\n      // 'touch', 'mouse'\n      scrollMode: undefined,\n      // 'transform', 'native'\n      bounce: true,\n      bounceForce: 0.1,\n      friction: 0.05,\n      textSelection: false,\n      inputsFocus: true,\n      emulateScroll: false,\n      preventDefaultOnEmulateScroll: false,\n      // 'vertical', 'horizontal'\n      preventPointerMoveDefault: true,\n      lockScrollOnDragDirection: false,\n      // 'vertical', 'horizontal', 'all'\n      pointerDownPreventDefault: true,\n      dragDirectionTolerance: 40,\n\n      onPointerDown() {},\n\n      onPointerUp() {},\n\n      onPointerMove() {},\n\n      onClick() {},\n\n      onUpdate() {},\n\n      onWheel() {},\n\n      shouldScroll() {\n        return true;\n      }\n\n    };\n    this.props = { ...defaults,\n      ...options\n    };\n\n    if (!this.props.viewport || !(this.props.viewport instanceof Element)) {\n      console.error(`ScrollBooster init error: \"viewport\" config property must be present and must be Element`);\n      return;\n    }\n\n    if (!this.props.content) {\n      console.error(`ScrollBooster init error: Viewport does not have any content`);\n      return;\n    }\n\n    this.isDragging = false;\n    this.isTargetScroll = false;\n    this.isScrolling = false;\n    this.isRunning = false;\n    const START_COORDINATES = {\n      x: 0,\n      y: 0\n    };\n    this.position = { ...START_COORDINATES\n    };\n    this.velocity = { ...START_COORDINATES\n    };\n    this.dragStartPosition = { ...START_COORDINATES\n    };\n    this.dragOffset = { ...START_COORDINATES\n    };\n    this.clientOffset = { ...START_COORDINATES\n    };\n    this.dragPosition = { ...START_COORDINATES\n    };\n    this.targetPosition = { ...START_COORDINATES\n    };\n    this.scrollOffset = { ...START_COORDINATES\n    };\n    this.rafID = null;\n    this.events = {};\n    this.updateMetrics();\n    this.handleEvents();\n  }\n  /**\n   * Update options object with new given values\n   */\n\n\n  updateOptions(options = {}) {\n    this.props = { ...this.props,\n      ...options\n    };\n    this.props.onUpdate(this.getState());\n    this.startAnimationLoop();\n  }\n  /**\n   * Update DOM container elements metrics (width and height)\n   */\n\n\n  updateMetrics() {\n    this.viewport = {\n      width: this.props.viewport.clientWidth,\n      height: this.props.viewport.clientHeight\n    };\n    this.content = {\n      width: getFullWidth(this.props.content),\n      height: getFullHeight(this.props.content)\n    };\n    this.edgeX = {\n      from: Math.min(-this.content.width + this.viewport.width, 0),\n      to: 0\n    };\n    this.edgeY = {\n      from: Math.min(-this.content.height + this.viewport.height, 0),\n      to: 0\n    };\n    this.props.onUpdate(this.getState());\n    this.startAnimationLoop();\n  }\n  /**\n   * Run animation loop\n   */\n\n\n  startAnimationLoop() {\n    this.isRunning = true;\n    cancelAnimationFrame(this.rafID);\n    this.rafID = requestAnimationFrame(() => this.animate());\n  }\n  /**\n   * Main animation loop\n   */\n\n\n  animate() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this.updateScrollPosition(); // stop animation loop if nothing moves\n\n    if (!this.isMoving()) {\n      this.isRunning = false;\n      this.isTargetScroll = false;\n    }\n\n    const state = this.getState();\n    this.setContentPosition(state);\n    this.props.onUpdate(state);\n    this.rafID = requestAnimationFrame(() => this.animate());\n  }\n  /**\n   * Calculate and set new scroll position\n   */\n\n\n  updateScrollPosition() {\n    this.applyEdgeForce();\n    this.applyDragForce();\n    this.applyScrollForce();\n    this.applyTargetForce();\n    const inverseFriction = 1 - this.props.friction;\n    this.velocity.x *= inverseFriction;\n    this.velocity.y *= inverseFriction;\n\n    if (this.props.direction !== 'vertical') {\n      this.position.x += this.velocity.x;\n    }\n\n    if (this.props.direction !== 'horizontal') {\n      this.position.y += this.velocity.y;\n    } // disable bounce effect\n\n\n    if ((!this.props.bounce || this.isScrolling) && !this.isTargetScroll) {\n      this.position.x = Math.max(Math.min(this.position.x, this.edgeX.to), this.edgeX.from);\n      this.position.y = Math.max(Math.min(this.position.y, this.edgeY.to), this.edgeY.from);\n    }\n  }\n  /**\n   * Increase general scroll velocity by given force amount\n   */\n\n\n  applyForce(force) {\n    this.velocity.x += force.x;\n    this.velocity.y += force.y;\n  }\n  /**\n   * Apply force for bounce effect\n   */\n\n\n  applyEdgeForce() {\n    if (!this.props.bounce || this.isDragging) {\n      return;\n    } // scrolled past viewport edges\n\n\n    const beyondXFrom = this.position.x < this.edgeX.from;\n    const beyondXTo = this.position.x > this.edgeX.to;\n    const beyondYFrom = this.position.y < this.edgeY.from;\n    const beyondYTo = this.position.y > this.edgeY.to;\n    const beyondX = beyondXFrom || beyondXTo;\n    const beyondY = beyondYFrom || beyondYTo;\n\n    if (!beyondX && !beyondY) {\n      return;\n    }\n\n    const edge = {\n      x: beyondXFrom ? this.edgeX.from : this.edgeX.to,\n      y: beyondYFrom ? this.edgeY.from : this.edgeY.to\n    };\n    const distanceToEdge = {\n      x: edge.x - this.position.x,\n      y: edge.y - this.position.y\n    };\n    const force = {\n      x: distanceToEdge.x * this.props.bounceForce,\n      y: distanceToEdge.y * this.props.bounceForce\n    };\n    const restPosition = {\n      x: this.position.x + (this.velocity.x + force.x) / this.props.friction,\n      y: this.position.y + (this.velocity.y + force.y) / this.props.friction\n    };\n\n    if (beyondXFrom && restPosition.x >= this.edgeX.from || beyondXTo && restPosition.x <= this.edgeX.to) {\n      force.x = distanceToEdge.x * this.props.bounceForce - this.velocity.x;\n    }\n\n    if (beyondYFrom && restPosition.y >= this.edgeY.from || beyondYTo && restPosition.y <= this.edgeY.to) {\n      force.y = distanceToEdge.y * this.props.bounceForce - this.velocity.y;\n    }\n\n    this.applyForce({\n      x: beyondX ? force.x : 0,\n      y: beyondY ? force.y : 0\n    });\n  }\n  /**\n   * Apply force to move content while dragging with mouse/touch\n   */\n\n\n  applyDragForce() {\n    if (!this.isDragging) {\n      return;\n    }\n\n    const dragVelocity = {\n      x: this.dragPosition.x - this.position.x,\n      y: this.dragPosition.y - this.position.y\n    };\n    this.applyForce({\n      x: dragVelocity.x - this.velocity.x,\n      y: dragVelocity.y - this.velocity.y\n    });\n  }\n  /**\n   * Apply force to emulate mouse wheel or trackpad\n   */\n\n\n  applyScrollForce() {\n    if (!this.isScrolling) {\n      return;\n    }\n\n    this.applyForce({\n      x: this.scrollOffset.x - this.velocity.x,\n      y: this.scrollOffset.y - this.velocity.y\n    });\n    this.scrollOffset.x = 0;\n    this.scrollOffset.y = 0;\n  }\n  /**\n   * Apply force to scroll to given target coordinate\n   */\n\n\n  applyTargetForce() {\n    if (!this.isTargetScroll) {\n      return;\n    }\n\n    this.applyForce({\n      x: (this.targetPosition.x - this.position.x) * 0.08 - this.velocity.x,\n      y: (this.targetPosition.y - this.position.y) * 0.08 - this.velocity.y\n    });\n  }\n  /**\n   * Check if scrolling happening\n   */\n\n\n  isMoving() {\n    return this.isDragging || this.isScrolling || Math.abs(this.velocity.x) >= 0.01 || Math.abs(this.velocity.y) >= 0.01;\n  }\n  /**\n   * Set scroll target coordinate for smooth scroll\n   */\n\n\n  scrollTo(position = {}) {\n    this.isTargetScroll = true;\n    this.targetPosition.x = -position.x || 0;\n    this.targetPosition.y = -position.y || 0;\n    this.startAnimationLoop();\n  }\n  /**\n   * Manual position setting\n   */\n\n\n  setPosition(position = {}) {\n    this.velocity.x = 0;\n    this.velocity.y = 0;\n    this.position.x = -position.x || 0;\n    this.position.y = -position.y || 0;\n    this.startAnimationLoop();\n  }\n  /**\n   * Get latest metrics and coordinates\n   */\n\n\n  getState() {\n    return {\n      isMoving: this.isMoving(),\n      isDragging: !!(this.dragOffset.x || this.dragOffset.y),\n      position: {\n        x: -this.position.x,\n        y: -this.position.y\n      },\n      dragOffset: this.dragOffset,\n      dragAngle: this.getDragAngle(this.clientOffset.x, this.clientOffset.y),\n      borderCollision: {\n        left: this.position.x >= this.edgeX.to,\n        right: this.position.x <= this.edgeX.from,\n        top: this.position.y >= this.edgeY.to,\n        bottom: this.position.y <= this.edgeY.from\n      }\n    };\n  }\n  /**\n   * Get drag angle (up: 180, left: -90, right: 90, down: 0)\n   */\n\n\n  getDragAngle(x, y) {\n    return Math.round(Math.atan2(x, y) * (180 / Math.PI));\n  }\n  /**\n   * Get drag direction (horizontal or vertical)\n   */\n\n\n  getDragDirection(angle, tolerance) {\n    const absAngle = Math.abs(90 - Math.abs(angle));\n\n    if (absAngle <= 90 - tolerance) {\n      return 'horizontal';\n    } else {\n      return 'vertical';\n    }\n  }\n  /**\n   * Update DOM container elements metrics (width and height)\n   */\n\n\n  setContentPosition(state) {\n    if (this.props.scrollMode === 'transform') {\n      this.props.content.style.transform = `translate(${-state.position.x}px, ${-state.position.y}px)`;\n    }\n\n    if (this.props.scrollMode === 'native') {\n      this.props.viewport.scrollTop = state.position.y;\n      this.props.viewport.scrollLeft = state.position.x;\n    }\n  }\n  /**\n   * Register all DOM events\n   */\n\n\n  handleEvents() {\n    const dragOrigin = {\n      x: 0,\n      y: 0\n    };\n    const clientOrigin = {\n      x: 0,\n      y: 0\n    };\n    let dragDirection = null;\n    let wheelTimer = null;\n    let isTouch = false;\n\n    const setDragPosition = event => {\n      if (!this.isDragging) {\n        return;\n      }\n\n      const eventData = isTouch ? event.touches[0] : event;\n      const {\n        pageX,\n        pageY,\n        clientX,\n        clientY\n      } = eventData;\n      this.dragOffset.x = pageX - dragOrigin.x;\n      this.dragOffset.y = pageY - dragOrigin.y;\n      this.clientOffset.x = clientX - clientOrigin.x;\n      this.clientOffset.y = clientY - clientOrigin.y; // get dragDirection if offset threshold is reached\n\n      if (Math.abs(this.clientOffset.x) > 5 && !dragDirection || Math.abs(this.clientOffset.y) > 5 && !dragDirection) {\n        dragDirection = this.getDragDirection(this.getDragAngle(this.clientOffset.x, this.clientOffset.y), this.props.dragDirectionTolerance);\n      } // prevent scroll if not expected scroll direction\n\n\n      if (this.props.lockScrollOnDragDirection && this.props.lockScrollOnDragDirection !== 'all') {\n        if (dragDirection === this.props.lockScrollOnDragDirection && isTouch) {\n          this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n          this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n        } else if (!isTouch) {\n          this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n          this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n        } else {\n          this.dragPosition.x = this.dragStartPosition.x;\n          this.dragPosition.y = this.dragStartPosition.y;\n        }\n      } else {\n        this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n        this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n      }\n    };\n\n    this.events.pointerdown = event => {\n      isTouch = !!(event.touches && event.touches[0]);\n      this.props.onPointerDown(this.getState(), event, isTouch);\n      const eventData = isTouch ? event.touches[0] : event;\n      const {\n        pageX,\n        pageY,\n        clientX,\n        clientY\n      } = eventData;\n      const {\n        viewport\n      } = this.props;\n      const rect = viewport.getBoundingClientRect(); // click on vertical scrollbar\n\n      if (clientX - rect.left >= viewport.clientLeft + viewport.clientWidth) {\n        return;\n      } // click on horizontal scrollbar\n\n\n      if (clientY - rect.top >= viewport.clientTop + viewport.clientHeight) {\n        return;\n      } // interaction disabled by user\n\n\n      if (!this.props.shouldScroll(this.getState(), event)) {\n        return;\n      } // disable right mouse button scroll\n\n\n      if (event.button === 2) {\n        return;\n      } // disable on mobile\n\n\n      if (this.props.pointerMode === 'mouse' && isTouch) {\n        return;\n      } // disable on desktop\n\n\n      if (this.props.pointerMode === 'touch' && !isTouch) {\n        return;\n      } // focus on form input elements\n\n\n      const formNodes = ['input', 'textarea', 'button', 'select', 'label'];\n\n      if (this.props.inputsFocus && formNodes.indexOf(event.target.nodeName.toLowerCase()) > -1) {\n        return;\n      } // handle text selection\n\n\n      if (this.props.textSelection) {\n        const textNode = textNodeFromPoint(event.target, clientX, clientY);\n\n        if (textNode) {\n          return;\n        }\n\n        clearTextSelection();\n      }\n\n      this.isDragging = true;\n      dragOrigin.x = pageX;\n      dragOrigin.y = pageY;\n      clientOrigin.x = clientX;\n      clientOrigin.y = clientY;\n      this.dragStartPosition.x = this.position.x;\n      this.dragStartPosition.y = this.position.y;\n      setDragPosition(event);\n      this.startAnimationLoop();\n\n      if (!isTouch && this.props.pointerDownPreventDefault) {\n        event.preventDefault();\n      }\n    };\n\n    this.events.pointermove = event => {\n      // prevent default scroll if scroll direction is locked\n      if (event.cancelable && (this.props.lockScrollOnDragDirection === 'all' || this.props.lockScrollOnDragDirection === dragDirection)) {\n        event.preventDefault();\n      }\n\n      setDragPosition(event);\n      this.props.onPointerMove(this.getState(), event, isTouch);\n    };\n\n    this.events.pointerup = event => {\n      this.isDragging = false;\n      dragDirection = null;\n      this.props.onPointerUp(this.getState(), event, isTouch);\n    };\n\n    this.events.wheel = event => {\n      const state = this.getState();\n\n      if (!this.props.emulateScroll) {\n        return;\n      }\n\n      this.velocity.x = 0;\n      this.velocity.y = 0;\n      this.isScrolling = true;\n      this.scrollOffset.x = -event.deltaX;\n      this.scrollOffset.y = -event.deltaY;\n      this.props.onWheel(state, event);\n      this.startAnimationLoop();\n      clearTimeout(wheelTimer);\n      wheelTimer = setTimeout(() => this.isScrolling = false, 80); // get (trackpad) scrollDirection and prevent default events\n\n      if (this.props.preventDefaultOnEmulateScroll && this.getDragDirection(this.getDragAngle(-event.deltaX, -event.deltaY), this.props.dragDirectionTolerance) === this.props.preventDefaultOnEmulateScroll) {\n        event.preventDefault();\n      }\n    };\n\n    this.events.scroll = () => {\n      const {\n        scrollLeft,\n        scrollTop\n      } = this.props.viewport;\n\n      if (Math.abs(this.position.x + scrollLeft) > 3) {\n        this.position.x = -scrollLeft;\n        this.velocity.x = 0;\n      }\n\n      if (Math.abs(this.position.y + scrollTop) > 3) {\n        this.position.y = -scrollTop;\n        this.velocity.y = 0;\n      }\n    };\n\n    this.events.click = event => {\n      const state = this.getState();\n      const dragOffsetX = this.props.direction !== 'vertical' ? state.dragOffset.x : 0;\n      const dragOffsetY = this.props.direction !== 'horizontal' ? state.dragOffset.y : 0;\n\n      if (Math.max(Math.abs(dragOffsetX), Math.abs(dragOffsetY)) > CLICK_EVENT_THRESHOLD_PX) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this.props.onClick(state, event, isTouch);\n    };\n\n    this.events.contentLoad = () => this.updateMetrics();\n\n    this.events.resize = () => this.updateMetrics();\n\n    this.props.viewport.addEventListener('mousedown', this.events.pointerdown);\n    this.props.viewport.addEventListener('touchstart', this.events.pointerdown, {\n      passive: false\n    });\n    this.props.viewport.addEventListener('click', this.events.click);\n    this.props.viewport.addEventListener('wheel', this.events.wheel, {\n      passive: false\n    });\n    this.props.viewport.addEventListener('scroll', this.events.scroll);\n    this.props.content.addEventListener('load', this.events.contentLoad, true);\n    window.addEventListener('mousemove', this.events.pointermove);\n    window.addEventListener('touchmove', this.events.pointermove, {\n      passive: false\n    });\n    window.addEventListener('mouseup', this.events.pointerup);\n    window.addEventListener('touchend', this.events.pointerup);\n    window.addEventListener('resize', this.events.resize);\n  }\n  /**\n   * Unregister all DOM events\n   */\n\n\n  destroy() {\n    this.props.viewport.removeEventListener('mousedown', this.events.pointerdown);\n    this.props.viewport.removeEventListener('touchstart', this.events.pointerdown);\n    this.props.viewport.removeEventListener('click', this.events.click);\n    this.props.viewport.removeEventListener('wheel', this.events.wheel);\n    this.props.viewport.removeEventListener('scroll', this.events.scroll);\n    this.props.content.removeEventListener('load', this.events.contentLoad);\n    window.removeEventListener('mousemove', this.events.pointermove);\n    window.removeEventListener('touchmove', this.events.pointermove);\n    window.removeEventListener('mouseup', this.events.pointerup);\n    window.removeEventListener('touchend', this.events.pointerup);\n    window.removeEventListener('resize', this.events.resize);\n  }\n\n}","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/node_modules/scrollbooster/src/index.js"],"names":["getFullWidth","elem","Math","max","offsetWidth","scrollWidth","getFullHeight","offsetHeight","scrollHeight","textNodeFromPoint","element","x","y","nodes","childNodes","range","document","createRange","i","length","node","nodeType","selectNodeContents","rect","getBoundingClientRect","left","top","right","bottom","clearTextSelection","selection","window","getSelection","removeAllRanges","empty","CLICK_EVENT_THRESHOLD_PX","ScrollBooster","constructor","options","defaults","content","viewport","children","direction","pointerMode","scrollMode","undefined","bounce","bounceForce","friction","textSelection","inputsFocus","emulateScroll","preventDefaultOnEmulateScroll","preventPointerMoveDefault","lockScrollOnDragDirection","pointerDownPreventDefault","dragDirectionTolerance","onPointerDown","onPointerUp","onPointerMove","onClick","onUpdate","onWheel","shouldScroll","props","Element","console","error","isDragging","isTargetScroll","isScrolling","isRunning","START_COORDINATES","position","velocity","dragStartPosition","dragOffset","clientOffset","dragPosition","targetPosition","scrollOffset","rafID","events","updateMetrics","handleEvents","updateOptions","getState","startAnimationLoop","width","clientWidth","height","clientHeight","edgeX","from","min","to","edgeY","cancelAnimationFrame","requestAnimationFrame","animate","updateScrollPosition","isMoving","state","setContentPosition","applyEdgeForce","applyDragForce","applyScrollForce","applyTargetForce","inverseFriction","applyForce","force","beyondXFrom","beyondXTo","beyondYFrom","beyondYTo","beyondX","beyondY","edge","distanceToEdge","restPosition","dragVelocity","abs","scrollTo","setPosition","dragAngle","getDragAngle","borderCollision","round","atan2","PI","getDragDirection","angle","tolerance","absAngle","style","transform","scrollTop","scrollLeft","dragOrigin","clientOrigin","dragDirection","wheelTimer","isTouch","setDragPosition","event","eventData","touches","pageX","pageY","clientX","clientY","pointerdown","clientLeft","clientTop","button","formNodes","indexOf","target","nodeName","toLowerCase","textNode","preventDefault","pointermove","cancelable","pointerup","wheel","deltaX","deltaY","clearTimeout","setTimeout","scroll","click","dragOffsetX","dragOffsetY","stopPropagation","contentLoad","resize","addEventListener","passive","destroy","removeEventListener"],"mappings":"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","sourcesContent":["const getFullWidth = (elem) => Math.max(elem.offsetWidth, elem.scrollWidth);\nconst getFullHeight = (elem) => Math.max(elem.offsetHeight, elem.scrollHeight);\n\nconst textNodeFromPoint = (element, x, y) => {\n    const nodes = element.childNodes;\n    const range = document.createRange();\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (node.nodeType !== 3) {\n            continue;\n        }\n        range.selectNodeContents(node);\n        const rect = range.getBoundingClientRect();\n        if (x >= rect.left && y >= rect.top && x <= rect.right && y <= rect.bottom) {\n            return node;\n        }\n    }\n    return false;\n};\n\nconst clearTextSelection = () => {\n    const selection = window.getSelection ? window.getSelection() : document.selection;\n    if (!selection) {\n        return;\n    }\n    if (selection.removeAllRanges) {\n        selection.removeAllRanges();\n    } else if (selection.empty) {\n        selection.empty();\n    }\n};\n\nconst CLICK_EVENT_THRESHOLD_PX = 5;\n\nexport default class ScrollBooster {\n    /**\n     * Create ScrollBooster instance\n     * @param {Object} options - options object\n     * @param {Element} options.viewport - container element\n     * @param {Element} options.content - scrollable content element\n     * @param {String} options.direction - scroll direction\n     * @param {String} options.pointerMode - mouse or touch support\n     * @param {String} options.scrollMode - predefined scrolling technique\n     * @param {Boolean} options.bounce - bounce effect\n     * @param {Number} options.bounceForce - bounce effect factor\n     * @param {Number} options.friction - scroll friction factor\n     * @param {Boolean} options.textSelection - enables text selection\n     * @param {Boolean} options.inputsFocus - enables focus on input elements\n     * @param {Boolean} options.emulateScroll - enables mousewheel emulation\n     * @param {Function} options.onClick - click handler\n     * @param {Function} options.onUpdate - state update handler\n     * @param {Function} options.onWheel - wheel handler\n     * @param {Function} options.shouldScroll - predicate to allow or disable scroll\n     */\n    constructor(options = {}) {\n        const defaults = {\n            content: options.viewport.children[0],\n            direction: 'all', // 'vertical', 'horizontal'\n            pointerMode: 'all', // 'touch', 'mouse'\n            scrollMode: undefined, // 'transform', 'native'\n            bounce: true,\n            bounceForce: 0.1,\n            friction: 0.05,\n            textSelection: false,\n            inputsFocus: true,\n            emulateScroll: false,\n            preventDefaultOnEmulateScroll: false, // 'vertical', 'horizontal'\n            preventPointerMoveDefault: true,\n            lockScrollOnDragDirection: false, // 'vertical', 'horizontal', 'all'\n            pointerDownPreventDefault: true,\n            dragDirectionTolerance: 40,\n            onPointerDown() {},\n            onPointerUp() {},\n            onPointerMove() {},\n            onClick() {},\n            onUpdate() {},\n            onWheel() {},\n            shouldScroll() {\n                return true;\n            },\n        };\n\n        this.props = { ...defaults, ...options };\n\n        if (!this.props.viewport || !(this.props.viewport instanceof Element)) {\n            console.error(`ScrollBooster init error: \"viewport\" config property must be present and must be Element`);\n            return;\n        }\n\n        if (!this.props.content) {\n            console.error(`ScrollBooster init error: Viewport does not have any content`);\n            return;\n        }\n\n        this.isDragging = false;\n        this.isTargetScroll = false;\n        this.isScrolling = false;\n        this.isRunning = false;\n\n        const START_COORDINATES = { x: 0, y: 0 };\n\n        this.position = { ...START_COORDINATES };\n        this.velocity = { ...START_COORDINATES };\n        this.dragStartPosition = { ...START_COORDINATES };\n        this.dragOffset = { ...START_COORDINATES };\n        this.clientOffset = { ...START_COORDINATES };\n        this.dragPosition = { ...START_COORDINATES };\n        this.targetPosition = { ...START_COORDINATES };\n        this.scrollOffset = { ...START_COORDINATES };\n\n        this.rafID = null;\n        this.events = {};\n\n        this.updateMetrics();\n        this.handleEvents();\n    }\n\n    /**\n     * Update options object with new given values\n     */\n    updateOptions(options = {}) {\n        this.props = { ...this.props, ...options };\n        this.props.onUpdate(this.getState());\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Update DOM container elements metrics (width and height)\n     */\n    updateMetrics() {\n        this.viewport = {\n            width: this.props.viewport.clientWidth,\n            height: this.props.viewport.clientHeight,\n        };\n        this.content = {\n            width: getFullWidth(this.props.content),\n            height: getFullHeight(this.props.content),\n        };\n        this.edgeX = {\n            from: Math.min(-this.content.width + this.viewport.width, 0),\n            to: 0,\n        };\n        this.edgeY = {\n            from: Math.min(-this.content.height + this.viewport.height, 0),\n            to: 0,\n        };\n\n        this.props.onUpdate(this.getState());\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Run animation loop\n     */\n    startAnimationLoop() {\n        this.isRunning = true;\n        cancelAnimationFrame(this.rafID);\n        this.rafID = requestAnimationFrame(() => this.animate());\n    }\n\n    /**\n     * Main animation loop\n     */\n    animate() {\n        if (!this.isRunning) {\n            return;\n        }\n        this.updateScrollPosition();\n        // stop animation loop if nothing moves\n        if (!this.isMoving()) {\n            this.isRunning = false;\n            this.isTargetScroll = false;\n        }\n        const state = this.getState();\n        this.setContentPosition(state);\n        this.props.onUpdate(state);\n        this.rafID = requestAnimationFrame(() => this.animate());\n    }\n\n    /**\n     * Calculate and set new scroll position\n     */\n    updateScrollPosition() {\n        this.applyEdgeForce();\n        this.applyDragForce();\n        this.applyScrollForce();\n        this.applyTargetForce();\n\n        const inverseFriction = 1 - this.props.friction;\n        this.velocity.x *= inverseFriction;\n        this.velocity.y *= inverseFriction;\n\n        if (this.props.direction !== 'vertical') {\n            this.position.x += this.velocity.x;\n        }\n        if (this.props.direction !== 'horizontal') {\n            this.position.y += this.velocity.y;\n        }\n\n        // disable bounce effect\n        if ((!this.props.bounce || this.isScrolling) && !this.isTargetScroll) {\n            this.position.x = Math.max(Math.min(this.position.x, this.edgeX.to), this.edgeX.from);\n            this.position.y = Math.max(Math.min(this.position.y, this.edgeY.to), this.edgeY.from);\n        }\n    }\n\n    /**\n     * Increase general scroll velocity by given force amount\n     */\n    applyForce(force) {\n        this.velocity.x += force.x;\n        this.velocity.y += force.y;\n    }\n\n    /**\n     * Apply force for bounce effect\n     */\n    applyEdgeForce() {\n        if (!this.props.bounce || this.isDragging) {\n            return;\n        }\n\n        // scrolled past viewport edges\n        const beyondXFrom = this.position.x < this.edgeX.from;\n        const beyondXTo = this.position.x > this.edgeX.to;\n        const beyondYFrom = this.position.y < this.edgeY.from;\n        const beyondYTo = this.position.y > this.edgeY.to;\n        const beyondX = beyondXFrom || beyondXTo;\n        const beyondY = beyondYFrom || beyondYTo;\n\n        if (!beyondX && !beyondY) {\n            return;\n        }\n\n        const edge = {\n            x: beyondXFrom ? this.edgeX.from : this.edgeX.to,\n            y: beyondYFrom ? this.edgeY.from : this.edgeY.to,\n        };\n\n        const distanceToEdge = {\n            x: edge.x - this.position.x,\n            y: edge.y - this.position.y,\n        };\n\n        const force = {\n            x: distanceToEdge.x * this.props.bounceForce,\n            y: distanceToEdge.y * this.props.bounceForce,\n        };\n\n        const restPosition = {\n            x: this.position.x + (this.velocity.x + force.x) / this.props.friction,\n            y: this.position.y + (this.velocity.y + force.y) / this.props.friction,\n        };\n\n        if ((beyondXFrom && restPosition.x >= this.edgeX.from) || (beyondXTo && restPosition.x <= this.edgeX.to)) {\n            force.x = distanceToEdge.x * this.props.bounceForce - this.velocity.x;\n        }\n\n        if ((beyondYFrom && restPosition.y >= this.edgeY.from) || (beyondYTo && restPosition.y <= this.edgeY.to)) {\n            force.y = distanceToEdge.y * this.props.bounceForce - this.velocity.y;\n        }\n\n        this.applyForce({\n            x: beyondX ? force.x : 0,\n            y: beyondY ? force.y : 0,\n        });\n    }\n\n    /**\n     * Apply force to move content while dragging with mouse/touch\n     */\n    applyDragForce() {\n        if (!this.isDragging) {\n            return;\n        }\n\n        const dragVelocity = {\n            x: this.dragPosition.x - this.position.x,\n            y: this.dragPosition.y - this.position.y,\n        };\n\n        this.applyForce({\n            x: dragVelocity.x - this.velocity.x,\n            y: dragVelocity.y - this.velocity.y,\n        });\n    }\n\n    /**\n     * Apply force to emulate mouse wheel or trackpad\n     */\n    applyScrollForce() {\n        if (!this.isScrolling) {\n            return;\n        }\n\n        this.applyForce({\n            x: this.scrollOffset.x - this.velocity.x,\n            y: this.scrollOffset.y - this.velocity.y,\n        });\n\n        this.scrollOffset.x = 0;\n        this.scrollOffset.y = 0;\n    }\n\n    /**\n     * Apply force to scroll to given target coordinate\n     */\n    applyTargetForce() {\n        if (!this.isTargetScroll) {\n            return;\n        }\n\n        this.applyForce({\n            x: (this.targetPosition.x - this.position.x) * 0.08 - this.velocity.x,\n            y: (this.targetPosition.y - this.position.y) * 0.08 - this.velocity.y,\n        });\n    }\n\n    /**\n     * Check if scrolling happening\n     */\n    isMoving() {\n        return (\n            this.isDragging ||\n            this.isScrolling ||\n            Math.abs(this.velocity.x) >= 0.01 ||\n            Math.abs(this.velocity.y) >= 0.01\n        );\n    }\n\n    /**\n     * Set scroll target coordinate for smooth scroll\n     */\n    scrollTo(position = {}) {\n        this.isTargetScroll = true;\n        this.targetPosition.x = -position.x || 0;\n        this.targetPosition.y = -position.y || 0;\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Manual position setting\n     */\n    setPosition(position = {}) {\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.position.x = -position.x || 0;\n        this.position.y = -position.y || 0;\n        this.startAnimationLoop();\n    }\n\n    /**\n     * Get latest metrics and coordinates\n     */\n    getState() {\n        return {\n            isMoving: this.isMoving(),\n            isDragging: !!(this.dragOffset.x || this.dragOffset.y),\n            position: { x: -this.position.x, y: -this.position.y },\n            dragOffset: this.dragOffset,\n            dragAngle: this.getDragAngle(this.clientOffset.x, this.clientOffset.y),\n            borderCollision: {\n                left: this.position.x >= this.edgeX.to,\n                right: this.position.x <= this.edgeX.from,\n                top: this.position.y >= this.edgeY.to,\n                bottom: this.position.y <= this.edgeY.from,\n            },\n        };\n    }\n\n    /**\n     * Get drag angle (up: 180, left: -90, right: 90, down: 0)\n     */\n    getDragAngle(x, y) {\n        return Math.round(Math.atan2(x, y) * (180 / Math.PI));\n    }\n\n    /**\n     * Get drag direction (horizontal or vertical)\n     */\n    getDragDirection(angle, tolerance) {\n        const absAngle = Math.abs(90 - Math.abs(angle));\n\n        if (absAngle <= 90 - tolerance) {\n            return 'horizontal';\n        } else {\n            return 'vertical';\n        }\n    }\n\n    /**\n     * Update DOM container elements metrics (width and height)\n     */\n    setContentPosition(state) {\n        if (this.props.scrollMode === 'transform') {\n            this.props.content.style.transform = `translate(${-state.position.x}px, ${-state.position.y}px)`;\n        }\n        if (this.props.scrollMode === 'native') {\n            this.props.viewport.scrollTop = state.position.y;\n            this.props.viewport.scrollLeft = state.position.x;\n        }\n    }\n\n    /**\n     * Register all DOM events\n     */\n    handleEvents() {\n        const dragOrigin = { x: 0, y: 0 };\n        const clientOrigin = { x: 0, y: 0 };\n        let dragDirection = null;\n        let wheelTimer = null;\n        let isTouch = false;\n\n        const setDragPosition = (event) => {\n            if (!this.isDragging) {\n                return;\n            }\n\n            const eventData = isTouch ? event.touches[0] : event;\n            const { pageX, pageY, clientX, clientY } = eventData;\n\n            this.dragOffset.x = pageX - dragOrigin.x;\n            this.dragOffset.y = pageY - dragOrigin.y;\n\n            this.clientOffset.x = clientX - clientOrigin.x;\n            this.clientOffset.y = clientY - clientOrigin.y;\n\n            // get dragDirection if offset threshold is reached\n            if (\n                (Math.abs(this.clientOffset.x) > 5 && !dragDirection) ||\n                (Math.abs(this.clientOffset.y) > 5 && !dragDirection)\n            ) {\n                dragDirection = this.getDragDirection(\n                    this.getDragAngle(this.clientOffset.x, this.clientOffset.y),\n                    this.props.dragDirectionTolerance\n                );\n            }\n\n            // prevent scroll if not expected scroll direction\n            if (this.props.lockScrollOnDragDirection && this.props.lockScrollOnDragDirection !== 'all') {\n                if (dragDirection === this.props.lockScrollOnDragDirection && isTouch) {\n                    this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n                    this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n                } else if (!isTouch) {\n                    this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n                    this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n                } else {\n                    this.dragPosition.x = this.dragStartPosition.x;\n                    this.dragPosition.y = this.dragStartPosition.y;\n                }\n            } else {\n                this.dragPosition.x = this.dragStartPosition.x + this.dragOffset.x;\n                this.dragPosition.y = this.dragStartPosition.y + this.dragOffset.y;\n            }\n        };\n\n        this.events.pointerdown = (event) => {\n            isTouch = !!(event.touches && event.touches[0]);\n\n            this.props.onPointerDown(this.getState(), event, isTouch);\n\n            const eventData = isTouch ? event.touches[0] : event;\n            const { pageX, pageY, clientX, clientY } = eventData;\n\n            const { viewport } = this.props;\n            const rect = viewport.getBoundingClientRect();\n\n            // click on vertical scrollbar\n            if (clientX - rect.left >= viewport.clientLeft + viewport.clientWidth) {\n                return;\n            }\n\n            // click on horizontal scrollbar\n            if (clientY - rect.top >= viewport.clientTop + viewport.clientHeight) {\n                return;\n            }\n\n            // interaction disabled by user\n            if (!this.props.shouldScroll(this.getState(), event)) {\n                return;\n            }\n\n            // disable right mouse button scroll\n            if (event.button === 2) {\n                return;\n            }\n\n            // disable on mobile\n            if (this.props.pointerMode === 'mouse' && isTouch) {\n                return;\n            }\n\n            // disable on desktop\n            if (this.props.pointerMode === 'touch' && !isTouch) {\n                return;\n            }\n\n            // focus on form input elements\n            const formNodes = ['input', 'textarea', 'button', 'select', 'label'];\n            if (this.props.inputsFocus && formNodes.indexOf(event.target.nodeName.toLowerCase()) > -1) {\n                return;\n            }\n\n            // handle text selection\n            if (this.props.textSelection) {\n                const textNode = textNodeFromPoint(event.target, clientX, clientY);\n                if (textNode) {\n                    return;\n                }\n                clearTextSelection();\n            }\n\n            this.isDragging = true;\n\n            dragOrigin.x = pageX;\n            dragOrigin.y = pageY;\n\n            clientOrigin.x = clientX;\n            clientOrigin.y = clientY;\n\n            this.dragStartPosition.x = this.position.x;\n            this.dragStartPosition.y = this.position.y;\n\n            setDragPosition(event);\n            this.startAnimationLoop();\n\n            if (!isTouch && this.props.pointerDownPreventDefault) {\n                event.preventDefault();\n            }\n        };\n\n        this.events.pointermove = (event) => {\n            // prevent default scroll if scroll direction is locked\n            if (event.cancelable && (this.props.lockScrollOnDragDirection === 'all' ||\n                this.props.lockScrollOnDragDirection === dragDirection)) {\n                event.preventDefault();\n            }\n            setDragPosition(event);\n            this.props.onPointerMove(this.getState(), event, isTouch);\n        };\n\n        this.events.pointerup = (event) => {\n            this.isDragging = false;\n            dragDirection = null;\n            this.props.onPointerUp(this.getState(), event, isTouch);\n        };\n\n        this.events.wheel = (event) => {\n            const state = this.getState();\n            if (!this.props.emulateScroll) {\n                return;\n            }\n            this.velocity.x = 0;\n            this.velocity.y = 0;\n            this.isScrolling = true;\n\n            this.scrollOffset.x = -event.deltaX;\n            this.scrollOffset.y = -event.deltaY;\n\n            this.props.onWheel(state, event);\n\n            this.startAnimationLoop();\n\n            clearTimeout(wheelTimer);\n            wheelTimer = setTimeout(() => (this.isScrolling = false), 80);\n\n            // get (trackpad) scrollDirection and prevent default events\n            if (\n                this.props.preventDefaultOnEmulateScroll &&\n                this.getDragDirection(\n                    this.getDragAngle(-event.deltaX, -event.deltaY),\n                    this.props.dragDirectionTolerance\n                ) === this.props.preventDefaultOnEmulateScroll\n            ) {\n                event.preventDefault();\n            }\n        };\n\n        this.events.scroll = () => {\n            const { scrollLeft, scrollTop } = this.props.viewport;\n            if (Math.abs(this.position.x + scrollLeft) > 3) {\n                this.position.x = -scrollLeft;\n                this.velocity.x = 0;\n            }\n            if (Math.abs(this.position.y + scrollTop) > 3) {\n                this.position.y = -scrollTop;\n                this.velocity.y = 0;\n            }\n        };\n\n        this.events.click = (event) => {\n            const state = this.getState();\n            const dragOffsetX = this.props.direction !== 'vertical' ? state.dragOffset.x : 0;\n            const dragOffsetY = this.props.direction !== 'horizontal' ? state.dragOffset.y : 0;\n            if (Math.max(Math.abs(dragOffsetX), Math.abs(dragOffsetY)) > CLICK_EVENT_THRESHOLD_PX) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            this.props.onClick(state, event, isTouch);\n        };\n\n        this.events.contentLoad = () => this.updateMetrics();\n        this.events.resize = () => this.updateMetrics();\n\n        this.props.viewport.addEventListener('mousedown', this.events.pointerdown);\n        this.props.viewport.addEventListener('touchstart', this.events.pointerdown, { passive: false });\n        this.props.viewport.addEventListener('click', this.events.click);\n        this.props.viewport.addEventListener('wheel', this.events.wheel, { passive: false });\n        this.props.viewport.addEventListener('scroll', this.events.scroll);\n        this.props.content.addEventListener('load', this.events.contentLoad, true);\n        window.addEventListener('mousemove', this.events.pointermove);\n        window.addEventListener('touchmove', this.events.pointermove, { passive: false });\n        window.addEventListener('mouseup', this.events.pointerup);\n        window.addEventListener('touchend', this.events.pointerup);\n        window.addEventListener('resize', this.events.resize);\n    }\n\n    /**\n     * Unregister all DOM events\n     */\n    destroy() {\n        this.props.viewport.removeEventListener('mousedown', this.events.pointerdown);\n        this.props.viewport.removeEventListener('touchstart', this.events.pointerdown);\n        this.props.viewport.removeEventListener('click', this.events.click);\n        this.props.viewport.removeEventListener('wheel', this.events.wheel);\n        this.props.viewport.removeEventListener('scroll', this.events.scroll);\n        this.props.content.removeEventListener('load', this.events.contentLoad);\n        window.removeEventListener('mousemove', this.events.pointermove);\n        window.removeEventListener('touchmove', this.events.pointermove);\n        window.removeEventListener('mouseup', this.events.pointerup);\n        window.removeEventListener('touchend', this.events.pointerup);\n        window.removeEventListener('resize', this.events.resize);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}