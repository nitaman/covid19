{"ast":null,"code":"var _jsxFileName = \"/Users/dailytohoku/AWS/react/covid/src/covid-inspection.js\";\nimport React, { Component } from 'react';\nimport { readRemoteFile } from 'react-papaparse';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CovidInspection extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      readRemoteFile('./data/04.csv', {\n        complete: results => {\n          var csvObj = csvJoin(results.data, '\\n');\n          var jsonObj = csvToJson(csvObj, {\n            header: 1,\n            columnName: ['name', 'uv', 'pv', 'amt']\n          });\n          console.log(jsonObj);\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleClick,\n      children: \"readRemoteFile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nvar csvJoin = function (mycsv, delimit) {\n  return mycsv.join(delimit);\n};\n\nvar csvToJson = function (csvStr, userOptions) {\n  if (typeof csvStr !== 'string') {\n    return null;\n  }\n\n  ;\n  var options = {\n    header: 0,\n    columnName: [],\n    ignoreBlankLine: true\n  };\n\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n\n  var rows = csvStr.split('\\n');\n  var json = [],\n      line = [],\n      row = '',\n      data = {};\n  var i, len, j, len2;\n\n  for (i = 0, len = rows.length; i < len; i++) {\n    if (i + 1 <= options.header) continue;\n    if (options.ignoreBlankLine && rows[i] === '') continue;\n    line = rows[i].split(',');\n\n    if (options.columnName.length > 0) {\n      data = {};\n\n      for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n        if (typeof line[j] !== 'undefined') {\n          row = line[j];\n          row = row.replace(/^\"(.+)?\"$/, '$1');\n        } else {\n          row = null;\n        }\n\n        data[options.columnName[j]] = row;\n      }\n\n      json.push(data);\n    } else {\n      json.push(line);\n    }\n  }\n\n  return json;\n};","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/src/covid-inspection.js"],"names":["React","Component","readRemoteFile","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","CovidInspection","handleClick","complete","results","csvObj","csvJoin","data","jsonObj","csvToJson","header","columnName","console","log","render","mycsv","delimit","join","csvStr","userOptions","options","ignoreBlankLine","rows","split","json","line","row","i","len","j","len2","length","replace","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { readRemoteFile } from 'react-papaparse';\nimport { BarChart, Bar,  XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nexport default class CovidInspection extends Component {\n  handleClick = () => {\n    readRemoteFile('./data/04.csv', {\n      complete: (results) => {\n        var csvObj = csvJoin(results.data,'\\n');\n        var jsonObj = csvToJson(csvObj, { header : 1, columnName : ['name', 'uv', 'pv', 'amt'] });\n        console.log(jsonObj);\n      },\n    });\n  };\n  render() {\n    return <button onClick={this.handleClick}>readRemoteFile</button>;\n  }\n}\n\nvar csvJoin = function(mycsv,delimit) {\n  return mycsv.join(delimit);\n};\n\nvar csvToJson = function(csvStr, userOptions) {\n  if (typeof csvStr !== 'string') {\n    return null\n  };\n  var options = { header : 0, columnName : [], ignoreBlankLine : true };\n  if (userOptions) {\n    if (userOptions.header) options.header = userOptions.header;\n    if (userOptions.columnName) options.columnName = userOptions.columnName;\n  }\n  var rows = csvStr.split('\\n');\n  var json = [], line = [], row = '', data = {};\n  var i, len, j, len2;\n  for (i = 0, len = rows.length; i < len; i++) {\n    if ((i + 1) <= options.header) continue;\n    if (options.ignoreBlankLine && rows[i] === '') continue;\n    line = rows[i].split(',');\n    if (options.columnName.length > 0) {\n      data = {};\n      for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n        if (typeof line[j] !== 'undefined') {\n          row = line[j];\n          row = row.replace(/^\"(.+)?\"$/, '$1');\n        } else {\n          row = null;\n        }\n        data[options.columnName[j]] = row;\n      }\n      json.push(data);\n    } else {\n      json.push(line);\n    }\n  }\n  return json;\n};\n"]},"metadata":{},"sourceType":"module"}