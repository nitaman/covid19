{"ast":null,"code":"var _jsxFileName = \"/Users/dailytohoku/AWS/react/covid/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  name: 'A',\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: 'B',\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: 'C',\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: 'D',\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: 'E',\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: 'F',\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: 'G',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}, {\n  name: 'H',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}, {\n  name: 'I',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}, {\n  name: 'J',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\nexport default class Example extends PureComponent {\n  render() {\n    var csvToJson = function (csvStr, userOptions) {\n      if (typeof csvStr !== 'string') return null;\n      var options = {\n        header: 0,\n        columnName: [],\n        ignoreBlankLine: true\n      };\n\n      if (userOptions) {\n        if (userOptions.header) options.header = userOptions.header;\n        if (userOptions.columnName) options.columnName = userOptions.columnName;\n      }\n\n      var rows = csvStr.split('\\n');\n      var json = [],\n          line = [],\n          row = '',\n          data = {};\n      var i, len, j, len2;\n\n      for (i = 0, len = rows.length; i < len; i++) {\n        if (i + 1 <= options.header) continue;\n        if (options.ignoreBlankLine && rows[i] === '') continue;\n        line = rows[i].split(',');\n\n        if (options.columnName.length > 0) {\n          data = {};\n\n          for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n            if (typeof line[j] !== 'undefined') {\n              row = line[j];\n              row = row.replace(/^\"(.+)?\"$/, '$1');\n            } else {\n              row = null;\n            }\n\n            data[options.columnName[j]] = row;\n          }\n\n          json.push(data);\n        } else {\n          json.push(line);\n        }\n      }\n\n      return json;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 500,\n        height: 300,\n        data: data,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"pv\",\n          stackId: \"a\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"uv\",\n          stackId: \"a\",\n          fill: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/src/App.js"],"names":["React","PureComponent","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","data","name","uv","pv","amt","Example","render","csvToJson","csvStr","userOptions","options","header","columnName","ignoreBlankLine","rows","split","json","line","row","i","len","j","len2","length","replace","push","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { BarChart, Bar,  XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst data = [\n  {\n    name: 'A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: 'B',\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: 'C',\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: 'D',\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: 'E',\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: 'F',\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: 'G',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n  {\n    name: 'H',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n  {\n    name: 'I',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n  {\n    name: 'J',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class Example extends PureComponent {\n\n  render() {\n\n    var csvToJson = function(csvStr, userOptions) {\n      if (typeof csvStr !== 'string') return null;\n   \n      var options = { header : 0, columnName : [], ignoreBlankLine : true };\n   \n      if (userOptions) {\n          if (userOptions.header) options.header = userOptions.header;\n          if (userOptions.columnName) options.columnName = userOptions.columnName;\n      }\n   \n      var rows = csvStr.split('\\n');\n      var json = [], line = [], row = '', data = {};\n      var i, len, j, len2;\n   \n      for (i = 0, len = rows.length; i < len; i++) {\n          if ((i + 1) <= options.header) continue;\n          if (options.ignoreBlankLine && rows[i] === '') continue;\n   \n          line = rows[i].split(',');\n   \n          if (options.columnName.length > 0) {\n              data = {};\n              for (j = 0, len2 = options.columnName.length; j < len2; j++) {\n                  if (typeof line[j] !== 'undefined') {\n                      row = line[j];\n                      row = row.replace(/^\"(.+)?\"$/, '$1');\n                  } else {\n                      row = null;\n                  }\n   \n                  data[options.columnName[j]] = row;\n              }\n              json.push(data);\n          } else {\n              json.push(line);\n          }\n      }\n   \n      return json;\n  };\n\n\n    return (\n      <div>\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\n          <Bar dataKey=\"uv\" stackId=\"a\" fill=\"#82ca9d\" />\n        </BarChart>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}