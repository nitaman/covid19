{"ast":null,"code":"var _jsxFileName = \"/Users/dailytohoku/AWS/react/covid/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  name: 'A',\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: 'B',\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: 'C',\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: 'D',\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: 'E',\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: 'F',\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: 'G',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}, {\n  name: 'H',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}, {\n  name: 'I',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}, {\n  name: 'J',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\n\nfunction CSVToMatrix(csv, delimiter) {\n  let matrix = [];\n  csv.split('\\n').map(l => {\n    l.trim() == \"\" ? 0 : matrix.push(l.trim().split(delimiter).map(v => v.trim()));\n  });\n  return matrix;\n}\n\n_c = CSVToMatrix;\n\nfunction MatrixToJSON(matrix, from, to) {\n  let jsonResult = [];\n  from = from || 0;\n  matrix.map((a, i) => {\n    let obj = Object.assign({}, ...matrix[0].map((h, index) => ({\n      [h]: matrix[i][index]\n    })));\n    jsonResult.push(obj);\n  });\n  return to ? jsonResult.splice(from, to) : jsonResult.splice(from);\n}\n\n_c2 = MatrixToJSON;\nexport default class Example extends PureComponent {\n  render() {\n    var inputCSV = \"/data/03.csv\";\n    var MATRIX = CSVToMatrix(inputCSV, ',');\n    var JSON = MatrixToJSON(MATRIX, 1);\n    console.log(JSON);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 500,\n        height: 300,\n        data: data,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"pv\",\n          stackId: \"a\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"uv\",\n          stackId: \"a\",\n          fill: \"#82ca9d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CSVToMatrix\");\n$RefreshReg$(_c2, \"MatrixToJSON\");","map":{"version":3,"sources":["/Users/dailytohoku/AWS/react/covid/src/App.js"],"names":["React","PureComponent","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","data","name","uv","pv","amt","CSVToMatrix","csv","delimiter","matrix","split","map","l","trim","push","v","MatrixToJSON","from","to","jsonResult","a","i","obj","Object","assign","h","index","splice","Example","render","inputCSV","MATRIX","JSON","console","log","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { BarChart, Bar,  XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst data = [\n  {\n    name: 'A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: 'B',\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: 'C',\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: 'D',\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: 'E',\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: 'F',\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: 'G',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n  {\n    name: 'H',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n  {\n    name: 'I',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n  {\n    name: 'J',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\n    function CSVToMatrix(csv,delimiter){\n      let matrix = [];\n      csv.split('\\n').map( l => { l.trim() == \"\" ? 0 : matrix.push(l.trim().split(delimiter).map(v=>v.trim())) })\n      return matrix\n    }\n    \n    function MatrixToJSON(matrix,from,to){\n      let jsonResult = []; from = from||0;  \n      matrix.map((a,i) => {\n        let obj = Object.assign({}, ...matrix[0].map((h, index) => ({[h]: matrix[i][index]})))\n        jsonResult.push(obj)\n      })\n      return to ? jsonResult.splice(from,to) : jsonResult.splice(from)\n    }\n\n\nexport default class Example extends PureComponent {\n\n  render() {\n    var inputCSV = \"/data/03.csv\"; \n    var MATRIX = CSVToMatrix(inputCSV, ',');\n    var JSON = MatrixToJSON( MATRIX, 1);\n    console.log(JSON);\n    return (\n      <div>\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\n          <Bar dataKey=\"uv\" stackId=\"a\" fill=\"#82ca9d\" />\n        </BarChart>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}